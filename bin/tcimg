#!/usr/bin/env node

const inquirer = require('inquirer')
const fs = require('fs')
const chalk = require('chalk')
const path = require('path')
const tinify = require('tinify')

let question = [
  {
    name: 'key',
    type: 'input',
    message: `Please input ${chalk.red('upload key')}, such as 'QPd6XXXXFsC0FtSXXXX8K1FsLZ7h3xHz'.\nYou can register to get one ${chalk.red('freely')} here: ${chalk.blue('https://tinypng.com/developers')} \n`,
    validate (val) {
      return true
    }
  },
  {
    name: 'inputUrl',
    type: 'input',
    message: `Please input ${chalk.red('original')} file path.\n The tool will ${chalk.red('recursively')} find all images in the ${chalk.red('path')} and the ${chalk.red('sub-path')}.\n Such as './assets/'`,
    validate (val) {
      return true
    }
  },
  {
    name: 'outputUrl',
    type: 'input',
    message: `Please input ${chalk.red('output')} file path. \nIf the output path is ${chalk.red('empty')}, the compressed image will be saved in the ${chalk.red('same')} path as before.\nSuch as './public/dist'`,
    validate (val) {
      return true
    }
  }
]

inquirer
  .prompt(question).then(answers => {
    // config
    let { key, inputUrl = '.', outputUrl } = answers;
    inputUrl = inputUrl || '.';
    outputUrl = outputUrl || 'Same file path as before';
    console.log('Upload key', chalk.blue(key));
    console.log('Original file path', chalk.blue(inputUrl));
    console.log('Output file path', chalk.blue(outputUrl));
    tinify.key = key;
    let count = 0;

    const compressFn = (filePath, filename) =>  {
      const filedir = path.join(filePath,filename);
      if (filename.match(/\.(png|jpe?g)$/)) {
        // eslint-disable-next-line no-console
        console.log(`Compressing:${chalk.red(filedir)}`);
        const source = tinify.fromFile(filedir)
        source.toFile(path.join(outputUrl || filePath, filename)).then(res => {
          count += 1;
          console.log(`${chalk.blue(filedir)} was compressed successfully`);
          console.log(`Already have compressed ${chalk.blue(count)} images`);
        })
      } else {
        // console.log('Can only compress the type of jp(e)g and png')
      }
    }

    function fileDisplay(filePath){
      fs.readdir(filePath,function(err,files){
          const excludeFolders = ['.DS_Store', '.git', 'node_modules', 'bin', '.gitignore', 'README.md', 'package-lock.json', 'package.json', 'yarn.lock']
          files = files.filter(file => !excludeFolders.includes(file))
          if(err){
              console.warn(chalk.red(err))
          }else{
              files.forEach(function(filename){
                const filedir = path.join(filePath,filename);
                fs.stat(filedir,function(eror,stats){
                    if(eror){
                        console.warn(chalk.red(`Failed to get file's stats`));
                    }else{
                        const isFile = stats.isFile();
                        const isDir = stats.isDirectory();
                        if(isFile){
                            compressFn(filePath, filename)
                        }
                        if(isDir){
                            fileDisplay(filedir);
                        }
                    }
                })
              });
          }
      });
    }
    fileDisplay(inputUrl)
})
